version: '3.8'

services:
  hunyuanworld-voyager-cpu:
    image: ubuntu:22.04
    container_name: hunyuanworld-voyager-cpu
    restart: unless-stopped
    
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        set -e
        echo "üöÄ HunyuanWorld-Voyager CPU - Starting..."
        echo "‚ö†Ô∏è  WARNING: Running in CPU-only mode (limited functionality)"
        
        export DEBIAN_FRONTEND=noninteractive
        
        # Install basic dependencies
        apt-get update && apt-get install -y \
            python3.11 python3.11-dev python3-pip git curl \
            libgl1-mesa-glx libglib2.0-0 build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        # Configure Python
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
        python3 -m pip install --upgrade pip
        
        # Clone repository if needed
        if [ ! -d "/app/.git" ]; then
            echo "üì¶ Cloning repository..."
            git clone https://github.com/dmax101/HunyuanWorld-Voyager.git /app
        fi
        
        cd /app
        
        # Install PyTorch CPU-only
        echo "üîß Installing PyTorch CPU-only..."
        pip install torch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 \
            --index-url https://download.pytorch.org/whl/cpu
        
        # Install basic dependencies for interface
        echo "üìö Installing interface dependencies..."
        pip install gradio transformers pillow numpy opencv-python \
                   imageio scipy loguru tqdm pandas accelerate
        
        # Create simplified CPU demo using Python directly
        python3 -c "
import os
with open('/app/app_cpu.py', 'w') as f:
    f.write('''import gradio as gr
import numpy as np
from PIL import Image
import time
import os

os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"

def process_demo(image, direction, prompt):
    if image is None:
        return None, \"‚ùå Please upload an image first\"
    
    time.sleep(2)
    
    result = f\"\"\"‚úÖ Interface working!

üì∑ Image: Received ({image.size if hasattr(image, \"size\") else \"Unknown\"})
üß≠ Direction: {direction}
üìù Prompt: {prompt}

‚ö†Ô∏è CPU VERSION - Limited functionality
üéØ For complete generation, use NVIDIA GPU 60GB+

This is a test interface to verify your Docker setup works.
For full video generation capabilities, you need the GPU version.
\"\"\"
    
    return image, result

with gr.Blocks(title=\"Voyager CPU Test\") as demo:
    gr.Markdown(\"# ‚òØÔ∏è HunyuanWorld-Voyager (CPU Test Mode)\")
    gr.Markdown(\"‚ö†Ô∏è **Limited functionality** - Interface testing only\")
    
    with gr.Row():
        with gr.Column():
            image = gr.Image(label=\"Upload Image\", type=\"pil\")
            direction = gr.Dropdown(
                [\"forward\", \"backward\", \"left\", \"right\", \"turn_left\", \"turn_right\"],
                label=\"Camera Direction\", value=\"forward\"
            )
            prompt = gr.Textbox(label=\"Text Prompt\", lines=3, 
                               placeholder=\"Describe the scene...\")
            btn = gr.Button(\"üîç Test Interface\", variant=\"primary\")
        
        with gr.Column():
            out_img = gr.Image(label=\"Result\")
            out_txt = gr.Textbox(label=\"Status\", lines=12)
    
    btn.click(process_demo, [image, direction, prompt], [out_img, out_txt])
    
    gr.Markdown(\"\"\"
    ## üí° About this CPU version:
    - ‚úÖ Interface fully functional
    - ‚úÖ Upload and validation working
    - ‚ùå No video generation (requires GPU)
    - ‚ùå No AI processing (requires CUDA)
    
    **Next step**: If this works, your infrastructure is ready for the full GPU version!
    \"\"\")

demo.launch(server_name=\"0.0.0.0\", server_port=8080, share=False)
''')
"
        
        echo ""
        echo "üåü =================================="
        echo "üåü  VOYAGER CPU DEMO READY!"
        echo "üåü =================================="
        echo "üåê Interface: http://localhost:3500"
        echo "üñ•Ô∏è  Mode: CPU-only (interface testing)"
        echo "üìñ Docs: https://github.com/dmax101/HunyuanWorld-Voyager"
        echo "‚ö†Ô∏è  Limited: No video generation"
        echo ""
        
        # Start CPU demo
        echo "üöÄ Starting test interface..."
        python3 /app/app_cpu.py
    
    ports:
      - "3500:8080"
    
    volumes:
      - voyager_cpu_app:/app
      - voyager_cpu_temp:/app/temp
      - voyager_cpu_cache:/root/.cache
    
    environment:
      # Force CPU
      - CUDA_VISIBLE_DEVICES=""
      - TORCH_DEVICE=cpu
      
      # Python
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Interface
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=8080
      - GRADIO_ANALYTICS_ENABLED=false
      
      # CPU Performance
      - OMP_NUM_THREADS=2
      - MKL_NUM_THREADS=2
    
    shm_size: 1gb
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 180s
    
    networks:
      - voyager_cpu_net

volumes:
  voyager_cpu_app:
    driver: local
  voyager_cpu_temp:
    driver: local
  voyager_cpu_cache:
    driver: local

networks:
  voyager_cpu_net:
    driver: bridge